<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>async javascript on wwwhmartins</title>
    <link>https://wmartins.github.io/tags/async-javascript/</link>
    <description>Recent content in async javascript on wwwhmartins</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 03 Jan 2019 00:19:19 -0200</lastBuildDate>
    
	<atom:link href="https://wmartins.github.io/tags/async-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>The Lost Callback</title>
      <link>https://wmartins.github.io/2019/01/the-lost-callback/</link>
      <pubDate>Thu, 03 Jan 2019 00:19:19 -0200</pubDate>
      
      <guid>https://wmartins.github.io/2019/01/the-lost-callback/</guid>
      <description>In the past few days I was investigating a really tricky issue in one of our React components. I decided to cover it here because I&amp;rsquo;ve found the problem interesting and, surprisingly, easy to fix after finding out the root cause.
The Component First, it&amp;rsquo;s nice to outline a little bit about the component itself. It&amp;rsquo;s a really simple react component that does the following things:
 When the component mounts, inserts a &amp;lt;script&amp;gt; tag on the page to load an external dependency When this script is loaded, instantiate a new instance of this external dependency Renders correctly both when script is loaded and when it isn&amp;rsquo;t When removing the component, destroys the external dependency instance  So, that said, lets jump into the parts that make it happen.</description>
    </item>
    
  </channel>
</rss>
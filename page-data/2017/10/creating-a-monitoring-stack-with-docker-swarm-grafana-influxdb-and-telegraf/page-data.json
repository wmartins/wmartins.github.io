{"componentChunkName":"component---src-templates-blog-post-js","path":"/2017/10/creating-a-monitoring-stack-with-docker-swarm-grafana-influxdb-and-telegraf/","result":{"data":{"markdownRemark":{"html":"<p>Monitoring your infrastructure is one of the most important aspects of\nsuccessfully launching a product. It's really important to know when your\nmachines/applications are under heavy load. Moreover, if it happens, you would\nwant to quickly know what's going on and what you can do to recover your\ninfrastructure.</p>\n<p>This blog post explains how you can configure setup a monitoring stack easily\nusing <a href=\"https://docs.docker.com/engine/swarm/\"><strong>Docker Swarm</strong></a>,\n<a href=\"https://github.com/grafana/grafana\"><strong>Grafana</strong></a>,\n<a href=\"https://github.com/influxdata/influxdb\"><strong>InfluxDB</strong></a> and\n<a href=\"https://github.com/influxdata/telegraf\"><strong>Telegraf</strong></a>.</p>\n<h2>Docker Swarm</h2>\n<p>This tutorial requires you to be running a <strong>Swarm cluster</strong>. You can also setup\nthis monitoring infrastructure without using Swarm, but it might become hard to\nmanage when you add or remove nodes on your cluster.</p>\n<blockquote>\n<p>You can achieve the same using another deployment/orchestration tool, like\n<a href=\"https://www.nomadproject.io/\"><strong>Nomad</strong></a>.</p>\n</blockquote>\n<p>We'll be using the version <strong>3.3</strong> of <code class=\"language-text\">docker-compose.yml</code> file.</p>\n<h2>Telegraf</h2>\n<p><a href=\"https://github.com/influxdata/telegraf\"><strong>Telegraf</strong></a> is an awesome tool to\nextract metrics.</p>\n<p>You can customize what data to extract and how <strong>Telegraf</strong> will do that by\nproviding a <code class=\"language-text\">telegraf.conf</code> file. The one we'll be using is this one:</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[[inputs.net]]\n  interfaces = [&quot;eth0,eth1,lo&quot;]\n\n[[inputs.cpu]]\n  percpu = true\n  totalcpu = true\n  collect_cpu_time = false\n\n[[inputs.disk]]\n  ignore_fs = [&quot;tmpfs&quot;, &quot;devtmpfs&quot;]\n\n[[inputs.diskio]]\n\n[[inputs.kernel]]\n\n[[inputs.mem]]\n\n[[inputs.processes]]\n\n[[inputs.swap]]\n[[inputs.system]]\n[[inputs.netstat]]\n\n[[inputs.docker]]\n  endpoint = &quot;unix:///var/run/docker.sock&quot;\n  container_names = []\n  timeout = &quot;5s&quot;\n  perdevice = true\n  total = false\n  docker_label_include = []\n  docker_label_exclude = []\n\n[[outputs.influxdb]]\n  urls = [&quot;http://influxdb:8086&quot;]\n  database = &quot;telegraf&quot;\n  retention_policy = &quot;&quot;\n  write_consistency = &quot;any&quot;\n  timeout = &quot;5s&quot;</code></pre></div>\n<p>If you want to get the default <strong>Telegraf</strong> config (with all options commented)\nyou can use the following command to get it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker pull telegraf:1.4.0-alpine\ndocker run --rm telegraf:1.4.0-alpine telegraf config <span class=\"token operator\">></span> telegraf.conf</code></pre></div>\n<p>After getting a <code class=\"language-text\">telegraf.conf</code> file, we're able to define our service\nconfiguration in <code class=\"language-text\">docker-compose.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"3.3\"</span>\n\n<span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">telegraf</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> telegraf<span class=\"token punctuation\">:</span>1.4.0\n    <span class=\"token key atrule\">hostname</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"{{.Node.ID}}\"</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /var/run/docker.sock<span class=\"token punctuation\">:</span>/var/run/docker.sock\n    <span class=\"token key atrule\">configs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> telegraf.conf\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> /etc/telegraf/telegraf.conf\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">mode</span><span class=\"token punctuation\">:</span> global\n\n<span class=\"token key atrule\">configs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">telegraf.conf</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span> ./telegraf/telegraf.conf</code></pre></div>\n<p>It's pretty simple. The trick here is to add <code class=\"language-text\">deploy mode</code> as <strong><code class=\"language-text\">global</code></strong>. This\nwill make <strong>Telegraf</strong> run on every machine in <strong>Swarm</strong> cluster, and that's how\nwe're going to be able to monitor the cluster machines.</p>\n<blockquote>\n<p>We're not using Telegraf's Alpine image because Alpine doesn't include\nall the dependencies to be able to collect <code class=\"language-text\">[[inputs.system]]</code>.</p>\n</blockquote>\n<h2>InfluxDB</h2>\n<p><a href=\"https://github.com/influxdata/influxdb\"><strong>InfluxDB</strong></a> is a time series database\nthat allows us to store the metrics provided by <strong>Telegraf</strong>.</p>\n<p>As <strong>InfluxDB</strong> is our database, we'll first need to define where it would be\nlocated. As we'll need the data to be persistent, it's a bad idea to have the\ndatabase popping out in different places (and, as a consequence, losing the\ndata if it's deployed to a newer place). So, grab one of your swarm nodes and\nadd a label to it:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker node update --label-add <span class=\"token assign-left variable\">influxdb</span><span class=\"token operator\">=</span>true <span class=\"token operator\">&lt;</span>NODE-ID<span class=\"token operator\">></span></code></pre></div>\n<p>This will add the node <code class=\"language-text\">influxdb</code> with value as <code class=\"language-text\">true</code> to the node <code class=\"language-text\">NODE-ID</code>.\nIt'll be used to know where we can add <code class=\"language-text\">influxdb</code> container.</p>\n<p>Then, we'll also be able to provide a configuration file, named <code class=\"language-text\">influxdb.conf</code>.\n<strong>InfluxDB</strong> also provides a way to get a config file template by running:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker run --rm influxdb:1.3.5-alpine influxd config <span class=\"token operator\">></span> influxdb.conf</code></pre></div>\n<p>Then, we can declare the <code class=\"language-text\">influxdb</code> service:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">influxdb</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> influxdb<span class=\"token punctuation\">:</span>1.3.5<span class=\"token punctuation\">-</span>alpine\n    <span class=\"token key atrule\">configs</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">source</span><span class=\"token punctuation\">:</span> influxdb.conf\n        <span class=\"token key atrule\">target</span><span class=\"token punctuation\">:</span> /etc/influxdb/influxdb.conf\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /data/influxdb<span class=\"token punctuation\">:</span>/var/lib/influxdb\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> node.labels.influxdb == true\n\n<span class=\"token key atrule\">configs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">influxdb.conf</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">file</span><span class=\"token punctuation\">:</span> ./influxdb/influxdb.conf</code></pre></div>\n<p>We'll use the following <code class=\"language-text\">influxdb.conf</code> file:</p>\n<div class=\"gatsby-highlight\" data-language=\"conf\"><pre class=\"language-conf\"><code class=\"language-conf\">[meta]\n  dir = &quot;/var/lib/influxdb/meta&quot;\n  retention-autocreate = true\n  logging-enabled = true\n\n[data]\n  dir = &quot;/var/lib/influxdb/data&quot;\n  index-version = &quot;inmem&quot;\n  wal-dir = &quot;/var/lib/influxdb/wal&quot;\n  wal-fsync-delay = &quot;0s&quot;\n  query-log-enabled = true\n  cache-max-memory-size = 1073741824\n  cache-snapshot-memory-size = 26214400\n  cache-snapshot-write-cold-duration = &quot;10m0s&quot;\n  compact-full-write-cold-duration = &quot;4h0m0s&quot;\n  max-series-per-database = 1000000\n  max-values-per-tag = 100000\n  max-concurrent-compactions = 0\n  trace-logging-enabled = false\n\n[http]\n  enabled = true\n  bind-address = &quot;:8086&quot;\n  auth-enabled = false\n  log-enabled = true\n  write-tracing = false\n  pprof-enabled = true\n  https-enabled = false\n  https-certificate = &quot;/etc/ssl/influxdb.pem&quot;\n  https-private-key = &quot;&quot;\n  max-row-limit = 0\n  max-connection-limit = 0\n  shared-secret = &quot;&quot;\n  realm = &quot;InfluxDB&quot;\n  unix-socket-enabled = false\n  bind-socket = &quot;/var/run/influxdb.sock&quot;</code></pre></div>\n<h2>Grafana</h2>\n<p>We'll use <strong>Grafana</strong> to visualize data coming from <strong>InfluxDB</strong>.</p>\n<p>First, we'll need to choose a node where we'll be running <strong>Grafana</strong>. After that,\nwe need to update its label in order to deploy grafana to the correct host:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker node update --label-add <span class=\"token assign-left variable\">grafana</span><span class=\"token operator\">=</span>true <span class=\"token operator\">&lt;</span>NODE-ID<span class=\"token operator\">></span></code></pre></div>\n<p><strong>Grafana</strong> service is pretty straightforward to configure, we just need to add its\nservice to <code class=\"language-text\">docker-compose.yml</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">grafana</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> grafana/grafana<span class=\"token punctuation\">:</span>4.5.2\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> 3000<span class=\"token punctuation\">:</span><span class=\"token number\">3000</span>\n    <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> /data/grafana<span class=\"token punctuation\">:</span>/var/lib/grafana\n    <span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">placement</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">constraints</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> node.labels.grafana == true</code></pre></div>\n<h2>Deployment Time!</h2>\n<p>It's time to deploy our monitoring stack. To do so, we'll use <code class=\"language-text\">docker stack</code>\ncommand:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker stack deploy -c docker-compose.yml MONITORING</code></pre></div>\n<p>You can check if your stack is running by typing:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">docker stack services MONITORING</code></pre></div>\n<p>You should see something like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">ID                  NAME                  MODE                REPLICAS            IMAGE                   PORTS\na9l5bzodswai        MONITORING_grafana    replicated          1/1                 grafana/grafana:4.5.2   *:3000-&gt;3000/tcp\nvmrob3iveofr        MONITORING_telegraf   global              1/1                 telegraf:1.4.0-alpine\nwllxmffrsxd7        MONITORING_influxdb   replicated          1/1                 influxdb:1.3.5-alpine</code></pre></div>\n<h3>Configuring Grafana</h3>\n<p>Now, it's time to configure a new <code class=\"language-text\">Data Source</code>. Go to <strong>Grafana</strong> admin page\n(<a href=\"http://localhost:3000\">http://localhost:3000</a>) and create a new <code class=\"language-text\">Data Source</code> with the following\nfields:</p>\n<ul>\n<li>Name: <code class=\"language-text\">InfluxDB</code></li>\n<li>Type: <code class=\"language-text\">InfluxDB</code></li>\n<li>\n<p>Http settings:</p>\n<ul>\n<li>Url: <code class=\"language-text\">http://influxdb:8086</code> (<code class=\"language-text\">Swarm</code> provides a DNS for us)</li>\n<li>Access: <code class=\"language-text\">proxy</code></li>\n</ul>\n</li>\n<li>\n<p>InfluxDB Details:</p>\n<ul>\n<li>Database: <code class=\"language-text\">telegraf</code></li>\n</ul>\n</li>\n</ul>\n<p>Then, we can create our dashboards and add data to them. If you don't know where\nto start, there are some nice dashboards in <a href=\"https://grafana.com/dashboards\">https://grafana.com/dashboards</a>. The\nfollowing dashboards are nice ones to use with <strong>Docker Swarm</strong>:</p>\n<ul>\n<li><a href=\"https://grafana.com/dashboards/1443\">https://grafana.com/dashboards/1443</a></li>\n<li><a href=\"https://grafana.com/dashboards/1150\">https://grafana.com/dashboards/1150</a></li>\n</ul>\n<p>Now, you'll have a nice and powerful monitoring stack for your Docker containers\nand for your machines!</p>\n<p>Hope you enjoyed!</p>","frontmatter":{"title":"Creating a Monitoring Stack With Docker Swarm, Grafana, InfluxDB and Telegraf","tags":["docker","docker swarm","grafana","influxdb","telegraf","monitoring"]}}},"pageContext":{"slug":"/2017/10/creating-a-monitoring-stack-with-docker-swarm-grafana-influxdb-and-telegraf/"}}}
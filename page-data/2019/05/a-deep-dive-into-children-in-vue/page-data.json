{"componentChunkName":"component---src-templates-blog-post-js","path":"/2019/05/a-deep-dive-into-children-in-vue/","result":{"data":{"markdownRemark":{"html":"<p>I got myself inspired by Max Stoiber in his <a href=\"https://mxstbr.blog/2017/02/react-children-deepdive/\"><strong>A deep dive into children in\nReact</strong></a> to create this\npost about Vue children. So, credits on the title to him. If you're into React,\ncheck out his post, it has lots of nice information on React children.</p>\n<h2>Motivation</h2>\n<p>I have started working with Vue a few months ago and it has been really nice.\nAfter working with React for some years, it's nice to experience something new.</p>\n<p>I'm writing this post because there are some patterns that I used in React and I\nmiss in Vue. In this case, this post will cover manipulating children elements\nin Vue components.</p>\n<p>This is really straightforward to do with React. So, I'll try to cover some\nparts of Vue that enables us to do something similar as done in React.</p>\n<p>The fantastic part is that Vue is really well thought (congratulations to all\nmaintainers for that) and really simple, so, we can manipulate Vue objects in an\neasy way to achieve what we need.</p>\n<h3>About React children</h3>\n<p>If you come from a non React background and want to know more about its children\nconcept, please refer to their documentation on that:</p>\n<ul>\n<li><a href=\"https://reactjs.org/docs/react-api.html#reactchildren\"><code class=\"language-text\">React.Children</code></a></li>\n</ul>\n<h2>What are children</h2>\n<p>First of all, to be on the same page, we'll call <code class=\"language-text\">children</code> elements all\nelements rendered inside any given Vue component. Here are some examples:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;Parent&gt;\n        &lt;div&gt;This is a child&lt;/div&gt;\n        &lt;Child /&gt; &lt;!-- This is also a child --&gt;\n        &lt;span&gt;Another child&lt;/div&gt;\n    &lt;/Parent&gt;\n&lt;/template&gt;</code></pre></div>\n<p>Every single element that is put inside another one can be considered a child\nelement. It doesn't matter if it is a custom component, a tag or some text.</p>\n<p>There's only one detail to the statement above:\n<a href=\"https://vuejs.org/v2/guide/components-slots.html\"><code class=\"language-text\">Vue Slots</code></a> work in a\ndifferent manner based on whether a component is\n<a href=\"https://vuejs.org/v2/guide/render-function.html#Functional-Components\"><code class=\"language-text\">functional</code></a>\nor not (we'll get to that later).</p>\n<h2>Creating templates with children support</h2>\n<p>To create elements that have children support we can simply use the <code class=\"language-text\">&lt;slot /&gt;</code>\ntag in our components.</p>\n<p>For example, imagine we're creating a dynamic <code class=\"language-text\">&lt;Button&gt;</code> component that receives\nits children. We can define the component template like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;button&gt;\n        &lt;slot /&gt;\n    &lt;/button&gt;\n&lt;/template&gt;</code></pre></div>\n<p>And, use it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;Button&gt;\n        Content goes here\n    &lt;/Button&gt;\n&lt;/template&gt;</code></pre></div>\n<p>This will render a button with <code class=\"language-text\">Content goes here</code> content.</p>\n<p>Please note that you can add anything \"renderable\" inside <code class=\"language-text\">&lt;slot&gt;</code>. In the\nexample above we rendered a simple text, but you can render a <code class=\"language-text\">&lt;div&gt;</code>, a\n<code class=\"language-text\">&lt;CustomComponent&gt;</code> and so on.</p>\n<h2>Vue render process</h2>\n<p>Before we continue, it's interesting to know a little bit how Vue render process\nworks. Basically, whenever you write a template, Vue compiles it to a\n<a href=\"https://vuejs.org/v2/guide/render-function.html\">render function</a>. As said in\n<a href=\"https://vuejs.org/v2/guide/render-function.html#Template-Compilation\">template\ncompilation</a>\npart:</p>\n<blockquote>\n<p>You may be interested to know that Vue’s templates actually compile to render\nfunctions. This is an implementation detail you usually don’t need to know\nabout, but if you’d like to see how specific template features are compiled,\nyou may find it interesting.</p>\n</blockquote>\n<p>This knowledge will be useful from now on, as we can use this to manipulate our\nchildren elements.</p>\n<h2>Manipulating children elements</h2>\n<p>Sadly Vue doesn't provide a way to manipulate children using the <code class=\"language-text\">&lt;template&gt;</code>\ntag. For example, using React one would do:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Component</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> children <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>React<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">child<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// do whatever I want with `child`</span>\n\n            <span class=\"token keyword\">return</span> child\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In Vue, we can leverage the use of\n<a href=\"https://vuejs.org/v2/guide/render-function.html#createElement-Arguments\"><code class=\"language-text\">createElement</code></a>\nand render functions. So, we will <strong>not</strong> write a <code class=\"language-text\">&lt;template&gt;</code> for our\ncomponents, as now we'll render the template manually.</p>\n<p>As a minimal boilerplate, if you want to manipulate children with Vue, you\nshould do:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script&gt;\nexport default {\n    functional: true,\n\n    render(createElement, context) {\n        const $children = context.children\n\n        const children = $children.map((child, i) =&gt; {\n            // do whatever I want with `child`\n\n            return child\n        })\n\n        return createElement(&#39;div&#39;, children)\n    }\n}\n&lt;/script&gt;</code></pre></div>\n<p>Please note that, as we're using <a href=\"https://vuejs.org/v2/guide/render-function.html#Functional-Components\">functional\ncomponents</a>,\nin this case <code class=\"language-text\">context.children</code> contains all given children, no matter if user\nspecified <code class=\"language-text\">slots</code>. For example, imagine that we're rendering the following\nchildren inside our component:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;template&gt;\n    &lt;Component&gt;\n        &lt;div&gt;Child 1&lt;/div&gt;\n        &lt;div slot=&quot;slot1&quot;&gt;Child 2&lt;/div&gt;\n    &lt;/Component&gt;\n&lt;/template&gt;</code></pre></div>\n<p>In this case, <code class=\"language-text\">context.children</code> contains both <code class=\"language-text\">Child 1</code> and <code class=\"language-text\">Child 2</code>. If you\nwant to have all slots separated, you can use <code class=\"language-text\">context.slots()</code> function. This\nwill return an object like:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span>VNode<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    slot1<span class=\"token operator\">:</span> Array<span class=\"token punctuation\">[</span>VNode<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>When not using functional components</h3>\n<p>I don't see why not use functional components in those cases, however, if you\nreally need to, it becomes a little bit harder and <em>unstable</em> to access children\ncomponents.</p>\n<p>First of all, you'll rely on <code class=\"language-text\">this</code> to access data. Second, you'll need to\naccess some private properties of the Vue instance, which is not really good\n(they're not documented in the \"public api\" -\n<a href=\"https://vuejs.org/v2/api/#Instance-Properties\">https://vuejs.org/v2/api/#Instance-Properties</a>), as if Vue core team decides to\nchange them, your code will break. Here's an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">export default {\n    render(createElement) {\n        const children = this.$options._renderChildren // a &quot;private&quot; property\n\n        return createElement(&#39;div&#39;, children)\n    }\n}</code></pre></div>\n<p>In the same way, you can also access <code class=\"language-text\">this.$slots</code> to get all slots.</p>\n<h2>Working example</h2>\n<p>I created a simple example to illustrate those situations. Please go to\n<a href=\"https://codesandbox.io/s/vue-template-ny5hg?fontsize=14\">https://codesandbox.io/s/vue-template-ny5hg?fontsize=14</a> and check it out. There,\nI'll have two components: one using <code class=\"language-text\">functional</code> components and other using\nregular components.</p>\n<h2>What can I do with that?</h2>\n<p>Well, mostly of those manipulations will be done in a higher level abstraction.\nFor example, imagine you need to filter out all <code class=\"language-text\">&lt;Other&gt;</code> component instances,\nyou can do something like that:</p>\n<div class=\"gatsby-highlight\" data-language=\"vue\"><pre class=\"language-vue\"><code class=\"language-vue\">&lt;script&gt;\nimport Other from &#39;./Other.vue&#39;\nexport default {\n  functional: true,\n\n  render(createElement, { children }) {\n    return createElement(&quot;div&quot;, children.filter(child =&gt; {\n      const { componentOptions = {} } = child\n      console.log(child, componentOptions.Ctor, Other._Ctor[0])\n\n      return componentOptions.Ctor !== Other._Ctor[0]\n    }));\n  }\n};\n&lt;/script&gt;</code></pre></div>\n<p>(It's a little bit ugly, I know)</p>\n<p>Another example is when you need to inject some properties. For example, take\nthe great Reach's Tabs component: <a href=\"https://ui.reach.tech/tabs/\">https://ui.reach.tech/tabs/</a>. It's a generic\nTab component that enables the user to place <code class=\"language-text\">&lt;TabList&gt;</code> (the tab navigation)\nand <code class=\"language-text\">&lt;TabPanels&gt;</code> wherever user wants. But, to do that, we need to have a smart\nwrapper component to do this for us.</p>\n<p>For example, take this template:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">&lt;template&gt;\n    &lt;div&gt;\n        &lt;Tabs&gt;\n            &lt;TabList&gt;\n                &lt;Tab&gt;Tab 1&lt;/Tab&gt;\n                &lt;Tab&gt;Tab 2&lt;/Tab&gt;\n            &lt;/TabList&gt;\n\n            &lt;TabPanels&gt;\n                &lt;TabPanel&gt;Tab panel 1&lt;/TabPanel&gt;\n                &lt;TabPanel&gt;Tab panel 2&lt;/TabPanel&gt;\n            &lt;/TabPanels&gt;\n        &lt;/Tabs&gt;\n    &lt;/div&gt;\n&lt;/template&gt;</code></pre></div>\n<p>In this case, <code class=\"language-text\">&lt;Tabs&gt;</code> can be \"smart\" and inject properties/callbacks to\nchildren components, allowing <code class=\"language-text\">&lt;TabList&gt;</code> and <code class=\"language-text\">&lt;TabPanels&gt;</code> to know which tab is\ncurrently active, handle tab change and so on.</p>\n<h2>References</h2>\n<p>While browsing for help on that subject, I've found some relevant discussions\nthat you may find interesting on further readings:</p>\n<ul>\n<li><a href=\"https://forum.vuejs.org/t/loop-through-elements-passed-into-slot/6558\">https://forum.vuejs.org/t/loop-through-elements-passed-into-slot/6558</a></li>\n<li><a href=\"https://forum.vuejs.org/t/loop-with-v-for-slots-default/20646/2\">https://forum.vuejs.org/t/loop-with-v-for-slots-default/20646/2</a></li>\n</ul>\n<p>There's also an abstraction that allows you to move this logic to your\n<code class=\"language-text\">&lt;template&gt;</code>, however, I don't really know if I like that, but it might help\nyou:</p>\n<ul>\n<li><a href=\"https://www.npmjs.com/package/vue-wrap\">https://www.npmjs.com/package/vue-wrap</a></li>\n</ul>","frontmatter":{"title":"A deep dive into children in Vue","tags":["vue","functional components","vue children"]}}},"pageContext":{"slug":"/2019/05/a-deep-dive-into-children-in-vue/"}}}